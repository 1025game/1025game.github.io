{
  "_args": [
    [
      {
        "raw": "react-draggable",
        "scope": null,
        "escapedName": "react-draggable",
        "name": "react-draggable",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/benblue/Desktop/Programming/react/1025game.github.io"
    ]
  ],
  "_from": "react-draggable@latest",
  "_id": "react-draggable@2.2.6",
  "_inCache": true,
  "_location": "/react-draggable",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-draggable-2.2.6.tgz_1493585560862_0.4015721627511084"
  },
  "_npmUser": {
    "name": "strml",
    "email": "samuel.trace.reed@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-draggable",
    "scope": null,
    "escapedName": "react-draggable",
    "name": "react-draggable",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-draggable/-/react-draggable-2.2.6.tgz",
  "_shasum": "3a806e10f2da6babfea4136be6510e89b0d76901",
  "_shrinkwrap": null,
  "_spec": "react-draggable",
  "_where": "/Users/benblue/Desktop/Programming/react/1025game.github.io",
  "author": {
    "name": "Matt Zabriskie"
  },
  "browser": "dist/react-draggable.js",
  "bugs": {
    "url": "https://github.com/mzabriskie/react-draggable/issues"
  },
  "dependencies": {
    "classnames": "^2.2.5"
  },
  "description": "React draggable component",
  "devDependencies": {
    "@types/react": "^15.0.23",
    "@types/react-dom": "^15.5.0",
    "babel-cli": "^6.10.1",
    "babel-core": "^6.10.4",
    "babel-eslint": "^6.1.2",
    "babel-loader": "^6.2.4",
    "babel-plugin-espower": "^2.3.1",
    "babel-plugin-transform-flow-comments": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-1": "^6.5.0",
    "eslint": "^3.1.1",
    "eslint-plugin-react": "^5.2.2",
    "flow-bin": "^0.35.0",
    "jasmine-core": "^2.4.1",
    "json-loader": "^0.5.4",
    "karma": "^1.1.1",
    "karma-chrome-launcher": "^1.0.1",
    "karma-cli": "1.0.1",
    "karma-firefox-launcher": "^1.0.0",
    "karma-ie-launcher": "^1.0.0",
    "karma-jasmine": "^1.0.2",
    "karma-phantomjs-launcher": "^1.0.1",
    "karma-phantomjs-shim": "^1.4.0",
    "karma-webpack": "^1.7.0",
    "lodash": "^4.13.1",
    "open": "0.0.5",
    "phantomjs-prebuilt": ">=2.1",
    "power-assert": "^1.4.1",
    "pre-commit": "^1.1.3",
    "prop-types": "^15.5.8",
    "react": "^15.2.1",
    "react-addons-test-utils": "^15.4.0",
    "react-dom": "^15.2.1",
    "react-frame-component": "0.6.2",
    "semver": "^5.3.0",
    "static-server": "^2.0.3",
    "typescript": "^2.3.2",
    "uglify-js": "^2.7.0",
    "webpack": "^1.13.1",
    "webpack-dev-server": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "shasum": "3a806e10f2da6babfea4136be6510e89b0d76901",
    "tarball": "https://registry.npmjs.org/react-draggable/-/react-draggable-2.2.6.tgz"
  },
  "gitHead": "267306250258ff79b942e1d1d1d87e2231dc8855",
  "homepage": "https://github.com/mzabriskie/react-draggable",
  "keywords": [
    "react",
    "draggable",
    "react-component"
  ],
  "license": "MIT",
  "main": "dist/react-draggable.js",
  "maintainers": [
    {
      "name": "mzabriskie",
      "email": "mzabriskie@gmail.com"
    },
    {
      "name": "strml",
      "email": "samuel.trace.reed@gmail.com"
    }
  ],
  "name": "react-draggable",
  "optionalDependencies": {},
  "precommit": [
    "lint",
    "test"
  ],
  "readme": "# React-Draggable\n\n[![TravisCI Build Status](https://travis-ci.org/mzabriskie/react-draggable.svg?branch=master)](https://travis-ci.org/mzabriskie/react-draggable)\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg=true)](https://ci.appveyor.com/project/mzabriskie/react-draggable)\n[![npm downloads](https://img.shields.io/npm/dt/react-draggable.svg?maxAge=2592000)](http://npmjs.com/package/react-draggable)\n[![gzip size](http://img.badgesize.io/https://npmcdn.com/react-draggable/dist/react-draggable.min.js?compression=gzip)]()\n\nA simple component for making elements draggable.\n\n```js\n<Draggable>\n  <div>I can now be moved around!</div>\n</Draggable>\n```\n\n- [Demo](http://mzabriskie.github.io/react-draggable/example/)\n- [Changelog](CHANGELOG.md)\n\n------\n\n#### Technical Documentation\n\n- [Installing](#installing)\n- [Exports](#exports)\n- [Draggable](#draggable)\n- [Draggable Usage](#draggable-usage)\n- [Draggable API](#draggable-api)\n- [Controlled vs. Uncontrolled](#controlled-vs-uncontrolled)\n- [DraggableCore](#draggablecore)\n- [DraggableCore API](#draggablecore-api)\n\n\n\n### Installing\n\n```bash\n$ npm install react-draggable\n```\n\nIf you aren't using browserify/webpack, a\n[UMD version of react-draggable](dist/react-draggable.js) is available. It is updated per-release only.\nThis bundle is also what is loaded when installing from npm. It expects external `React` and `ReactDOM`.\n\nIf you want a UMD version of the latest `master` revision, you can generate it yourself from master by cloning this\nrepository and running `$ make`. This will create umd dist files in the `dist/` folder.\n\n### Exports\n\nThe default export is `<Draggable>`. At the `.DraggableCore` property is [`<DraggableCore>`](#draggablecore).\nHere's how to use it:\n\n```js\n// ES6\nimport Draggable from 'react-draggable'; // The default\nimport {DraggableCore} from 'react-draggable'; // <DraggableCore>\nimport Draggable, {DraggableCore} from 'react-draggable'; // Both at the same time\n\n// CommonJS\nlet Draggable = require('react-draggable');\nlet DraggableCore = Draggable.DraggableCore;\n```\n\n## `<Draggable>`\n\nA `<Draggable>` element wraps an existing element and extends it with new event handlers and styles.\nIt does not create a wrapper element in the DOM.\n\nDraggable items are moved using CSS Transforms. This allows items to be dragged regardless of their current\npositioning (relative, absolute, or static). Elements can also be moved between drags without incident.\n\nIf the item you are dragging already has a CSS Transform applied, it will be overwritten by `<Draggable>`. Use\nan intermediate wrapper (`<Draggable><span>...</span></Draggable>`) in this case.\n\n### Draggable Usage\n\nView the [Demo](http://mzabriskie.github.io/react-draggable/example/) and its\n[source](/example/index.html) for more.\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Draggable from 'react-draggable';\n\nclass App extends React.Element {\n\n  eventLogger = (e: MouseEvent, data: Object) => {\n    console.log('Event: ', event);\n    console.log('Data: ', data);\n  };\n\n  render() {\n    return (\n      <Draggable\n        axis=\"x\"\n        handle=\".handle\"\n        defaultPosition={{x: 0, y: 0}}\n        position={null}\n        grid={[25, 25]}\n        onStart={this.handleStart}\n        onDrag={this.handleDrag}\n        onStop={this.handleStop}>\n        <div>\n          <div className=\"handle\">Drag from here</div>\n          <div>This readme is really dragging on...</div>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nReactDOM.render(<App/>, document.body);\n```\n\n### Draggable API\n\nThe `<Draggable/>` component transparently adds draggability to its children.\n\n**Note**: Only a single child is allowed or an Error will be thrown.\n\nFor the `<Draggable/>` component to correctly attach itself to its child, the child element must provide support\nfor the following props:\n- `style` is used to give the transform css to the child.\n- `className` is used to apply the proper classes to the object being dragged.\n- `onMouseDown`, `onMouseUp`, `onTouchStart`, and `onTouchEnd`  are used to keep track of dragging state.\n\nReact.DOM elements support the above properties by default, so you may use those elements as children without\nany changes. If you wish to use a React component you created, you'll need to be sure to\n[transfer prop](https://facebook.github.io/react/docs/transferring-props.html).\n\n#### `<Draggable>` Props:\n\n```js\n//\n// Types:\n//\ntype DraggableEventHandler = (e: Event, data: DraggableData) => void | false;\ntype DraggableData = {\n  node: HTMLElement,\n  // lastX + deltaX === x\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number\n};\n\n//\n// Props:\n//\n{\n// If set to `true`, will allow dragging on non left-button clicks.\nallowAnyClick: boolean,\n\n// Determines which axis the draggable can move. This only affects\n// flushing to the DOM. Callbacks will still include all values.\n// Accepted values:\n// - `both` allows movement horizontally and vertically (default).\n// - `x` limits movement to horizontal axis.\n// - `y` limits movement to vertical axis.\n// - 'none' stops all movement.\naxis: string,\n\n// Specifies movement boundaries. Accepted values:\n// - `parent` restricts movement within the node's offsetParent\n//    (nearest node with position relative or absolute), or\n// - a selector, restricts movement within the targeted node\n// - An object with `left, top, right, and bottom` properties.\n//   These indicate how far in each direction the draggable\n//   can be moved.\nbounds: {left: number, top: number, right: number, bottom: number} | string,\n\n// Specifies a selector to be used to prevent drag initialization.\n// Example: '.body'\ncancel: string,\n\n// Class names for draggable UI.\n// Default to 'react-draggable', 'react-draggable-dragging', and 'react-draggable-dragged'\ndefaultClassName: string,\ndefaultClassNameDragging: string,\ndefaultClassNameDragged: string,\n\n// Specifies the `x` and `y` that the dragged item should start at.\n// This is generally not necessary to use (you can use absolute or relative\n// positioning of the child directly), but can be helpful for uniformity in\n// your callbacks and with css transforms.\ndefaultPosition: {x: number, y: number},\n\n// If true, will not call any drag handlers.\ndisabled: boolean,\n\n// Specifies the x and y that dragging should snap to.\ngrid: [number, number],\n\n// Specifies a selector to be used as the handle that initiates drag.\n// Example: '.handle'\nhandle: string,\n\n// If desired, you can provide your own offsetParent for drag calculations.\n// By default, we use the Draggable's offsetParent. This can be useful for elements\n// with odd display types or floats.\noffsetParent: HTMLElement,\n\n// Called whenever the user mouses down. Called regardless of handle or\n// disabled status.\nonMouseDown: (e: MouseEvent) => void,\n\n// Called when dragging starts. If `false` is returned any handler,\n// the action will cancel.\nonStart: DraggableEventHandler,\n\n// Called while dragging.\nonDrag: DraggableEventHandler,\n\n// Called when dragging stops.\nonStop: DraggableEventHandler,\n\n// Much like React form elements, if this property is present, the item\n// becomes 'controlled' and is not responsive to user input. Use `position`\n// if you need to have direct control of the element.\nposition: {x: number, y: number}\n}\n```\n\n\nNote that sending `className`, `style`, or `transform` as properties will error - set them on the child element\ndirectly.\n\n\n## Controlled vs. Uncontrolled\n\n`<Draggable>` is a 'batteries-included' component that manages its own state. If you want to completely\ncontrol the lifecycle of the component, use `<DraggableCore>`.\n\nFor some users, they may want the nice state management that `<Draggable>` provides, but occasionally want\nto programmatically reposition their components. `<Draggable>` allows this customization via a system that\nis similar to how React handles form components.\n\nIf the prop `position: {x: number, y: number}` is defined, the `<Draggable>` will ignore its internal state and use\nthe provided position instead. Alternatively, you can seed the position using `defaultPosition`. Technically, since\n`<Draggable>` works only on position deltas, you could also seed the initial position using CSS `top/left`.\n\nWe make one modification to the React philosophy here - we still allow dragging while a component is controlled.\nWe then expect you to use at least an `onDrag` or `onStop` handler to synchronize state.\n\nTo disable dragging while controlled, send the prop `disabled={true}` - at this point the `<Draggable>` will operate\nlike a completely static component.\n\n## `<DraggableCore>`\n\nFor users that require absolute control, a `<DraggableCore>` element is available. This is useful as an abstraction\nover touch and mouse events, but with full control. `<DraggableCore>` has no internal state.\n\nSee [React-Resizable](https://github.com/STRML/react-resizable) and\n[React-Grid-Layout](https://github.com/STRML/react-grid-layout) for some usage examples.\n\n`<DraggableCore>` is a useful building block for other libraries that simply want to abstract browser-specific\nquirks and receive callbacks when a user attempts to move an element. It does not set styles or transforms\non itself and thus must have callbacks attached to be useful.\n\n### DraggableCore API\n\n`<DraggableCore>` takes a limited subset of options:\n\n```js\n{\n  allowAnyClick: boolean,\n  cancel: string,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void\n}\n```\n\nNote that there is no start position. `<DraggableCore>` simply calls `drag` handlers with the below parameters,\nindicating its position (as inferred from the underlying MouseEvent) and deltas. It is up to the parent\nto set actual positions on `<DraggableCore>`.\n\nDrag callbacks (`onStart`, `onDrag`, `onStop`) are called with the [same arguments as `<Draggable>`](#draggable-api).\n\n----\n\n### Contributing\n\n- Fork the project\n- Run the project in development mode: `$ npm run dev`\n- Make changes.\n- Add appropriate tests\n- `$ npm test`\n- If tests don't pass, make them pass.\n- Update README with appropriate docs.\n- Commit and PR\n\n### Release checklist\n\n- Update CHANGELOG\n- `make release-patch`, `make release-minor`, or `make-release-major`\n- `make publish`\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mzabriskie/react-draggable.git"
  },
  "scripts": {
    "build": "make clean build",
    "dev": "make dev",
    "lint": "make lint",
    "test": "make test",
    "test-debug": "karma start --browsers=Chrome",
    "test-ie": "karma start --browsers=IE"
  },
  "typings": "./typings/index.d.ts",
  "version": "2.2.6"
}
